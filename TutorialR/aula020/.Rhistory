dotchart(sqrt(kills$WAT.RES))
kills<-read.table("RoadKills.txt", header=TRUE)
# kills<-read.csv("RK.csv")
names(kills)
kills<-read.csv("RK.csv")
names(kills)
kills<-read.table("RoadKills.txt", header=TRUE)
names(kills)
head(kills)
#outliers
library(lattice)
dotplot(as.matrix(kills), groups = FALSE,
strip = strip.custom(bg = 'white',
par.strip.text = list(cex = 0.8)),
scales = list(x = list(relation = "free"),
y = list(relation = "free"),
draw = FALSE),
col = 1, cex  = 0.5, pch = 16,
xlab = "Value of the variable",
ylab = "Order of the data from text file")
#podem ter problemas
#WAT.RES
#URBAN
#SHRUB
#log? sqrt?
par(mfrow=c(1,1))
dotchart(sqrt(kills$WAT.RES))
dotchart(sqrt(kills$URBAN))
dotchart(sqrt(kills$SHRUB))
dotchart(sqrt(kills$POLIC))
#Excesso de zeros
plot(table(kills$TOT.N))
#Colinearidade
#pair plots and correlation
cor(kills)
pairs(kills[,4:10])
sqrtWAT.RES<-sqrt(kills$WAT.RES)
sqrtURBAN<-sqrt(kills$URBAN)
sqrtSHRUB<-sqrt(kills$SHRUB)
sqrtPOLIC<-sqrt(kills$POLIC)
model<-lm(TOT.N ~ OPEN.L+OLIVE+MONT.S+MONT+sqrtPOLIC+sqrtSHRUB+sqrtURBAN
+sqrtWAT.RES+L.WAT.C+L.D.ROAD+L.P.ROAD+D.WAT.RES+
D.WAT.COUR+D.PARK+N.PATCH+P.EDGE+L.SDI,
data=kills)
insp.plot(model)
insp.plot(model)
log.TOT.N<-log(kills$TOT.N)
model.log<-lm(log.TOT.N ~ OPEN.L+OLIVE+MONT.S+MONT+sqrtPOLIC+sqrtSHRUB+sqrtURBAN
+sqrtWAT.RES+L.WAT.C+L.D.ROAD+L.P.ROAD+D.WAT.RES+
D.WAT.COUR+D.PARK+N.PATCH+P.EDGE+L.SDI,
data=kills)
insp.plot(model.log)
library(car)
vif(model.log)
vif(update(model.log,.~.-MONT))
vif(update(model.log,.~.-MONT-N.PATCH))
vif(update(model.log,.~.-MONT-N.PATCH-P.EDGE))
vif(update(model.log,.~.-MONT-N.PATCH-P.EDGE-L.SDI))
vif(update(model.log,.~.-MONT-N.PATCH-P.EDGE-L.SDI-sqrtURBAN))
model2<-lm(log.TOT.N ~ OPEN.L+OLIVE+MONT.S+sqrtPOLIC+sqrtSHRUB
+sqrtWAT.RES+L.WAT.C+L.D.ROAD+L.P.ROAD+D.WAT.RES+
D.WAT.COUR+D.PARK,
data=kills)
summary(model2)
vif(model2)
#homogeneidae
#normalidade
dev.off()
insp.plot(model2)
summary(model2)
drop1(model2)
#GLS: Heterogeneidade da variância
#GLS: Heterogeneidade da variância
#GLS: Heterogeneidade da variância
#GLS: Heterogeneidade da variância
library(nlme)
library(modelvalidation)
Squid<-read.table("Squid.txt", header = TRUE)
Squid<-read.table("Squid.txt", header = TRUE)
Squid$fMONTH<-factor(Squid$MONTH)
#Entender os dados
plot(Testisweight~DML,data=Squid)
plot(sqrt(Testisweight)~DML,data=Squid)
coplot(Testisweight~DML|fMONTH,data=Squid,
panel = panel.smooth)
coplot(sqrt(Testisweight)~DML|fMONTH,
data=Squid,
panel = panel.smooth)
#Primeiro um Modelo Linear:
M1 <- lm(Testisweight ~ DML * fMONTH, data=Squid)
insp.plot(M1, data = data.frame(DML=Squid$DML,
fMONTH=Squid$fMONTH))
View(Squid)
sim<-insp.sim(model=M1,
nsim=19,
data=M1$model)
dev.off()
plots.insp.sim(insp.sim=sim,
resid=lapply(sim,extract.resid),
fitted=lapply(sim,fitted),
data=lapply(sim,extract.data),
ask=FALSE)
dev.off()
#Com a raiz quadrada
Squid$Testisweight.sqrt<-sqrt(Squid$Testisweight)
M2 <- lm(Testisweight.sqrt ~ DML * fMONTH,data=Squid)
insp.plot(M2, data = data.frame(DML=Squid$DML,
fMONTH=Squid$fMONTH))
sim<-insp.sim(model=M2,
nsim=19,
data=extract.data(M2))
plots.insp.sim(insp.sim=sim,
resid=lapply(sim,extract.resid),
fitted=lapply(sim,fitted),
data=lapply(sim,extract.data),
ask=FALSE)
#Primeiro, um modelo igual ao LM
M.lm<-gls(Testisweight.sqrt ~ DML*fMONTH,
data=Squid,
method = "REML")
#Agora o modelo com parâmetro para a variância:
#Variancia para cada mes do ano
#?varClasses
#?varIdent
vf1Ident <- varIdent(form = ~1|fMONTH)
M.gls1<-gls(Testisweight.sqrt~DML*fMONTH,
weights = vf1Ident,
data=Squid,
method = "REML") ##ReML se usa para estimar a estrutura da variância
summary(M.gls1)
#Validação:
#obs: precisa do pacote (nlraa)
library(nlraa)
dev.off()
insp.plot(M.gls1, data = data.frame(DML=Squid$DML,
fMONTH=Squid$fMONTH))
#Ao invés dos resíduos comums, os
#residuos são normalizados:
#normalized residuals (standardized residuals pre-multiplied by
#the inverse square-root factor
#of the estimated error correlation matrix)
#Zuur et al (2009) p85:
#These are obtained by calculating the
#observed minus the fitted values and
#then dividing by the square root of the variance.
sim<-insp.sim(model=M.gls1,
nsim=19,
data=extract.data(M.gls1))
###Atencao: aqui vai ser sim
dev.off()
plots.insp.sim(insp.sim = sim$sim,
resid= lapply(sim$sim,extract.resid),
fitted= lapply(sim$sim,fitted),
data= sim$sim.data,
pred = c("DML","fMONTH"),
ask=FALSE)
#Modelos Mistos / Multiníveis / Hierárquicos
#Modelos Mistos / Multiníveis / Hierárquicos
#Falta de Independencia
library(nlme) #ou lme4
library(modelvalidation)
library(MuMIn)
RIKZ<-read.table("RIKZ2.txt", header = TRUE, dec=".")
setwd("/home/cleber/github/Tutoriais/TutorialR/aula020")
RIKZ<-read.table("RIKZ2.txt", header = TRUE, dec=".")
head(RIKZ)
RIKZ$Beach<-as.factor(RIKZ$Beach)
table(RIKZ$Beach)
#ANCOVA
#Opção 1: LM ‘comum’ para cada praia (ANCOVA)
#Richness ~ NAP + BEACH + NAP*BEACH
#Rij =  aij + bijNAPij + eij, com eij ~ N(0,var)
#i = Praias (n = 9)
#j = locais de coleta (N = 5 por praia)
m1<-lm(Richness~ NAP * Beach , data = RIKZ, x = TRUE)
summary(m1)
#beta para praia 1
m1$coefficients[2]
#beta para praia 2
m1$coefficients[2]+m1$coefficients[11]
#beta para praia 3
m1$coefficients[2]+m1$coefficients[12]
#O equivalente a fazer um modelo linear para cada praia:
#Estimar beta para cada praia:
Beta<-vector(length=9)
for (i in 1:9){
tmpout<-summary(lm(Richness~NAP,subset = (Beach==i),data=RIKZ))
Beta[i]<-tmpout$coefficients[2,1]
}
Beta
#representacao gráfica desses resultados:
library(lattice)
xyplot(Richness~NAP|Beach, type=c("p","r"), data=RIKZ)
#Rij =  alpha + betaNAPij + aj + eij
#aj ~ N(0,var(a))
#Só intercept aleatório;
Mlme1 <- lme(Richness ~ NAP,
random = ~1|fBeach,data=RIKZ)
#MODELO MISTO
#Praia Entra como variável aleatória
#apenas intercept aleatorio
RIKZ$fBeach <- as.factor(RIKZ$Beach)
library(nlme) #library(lme4)
#Rij =  alpha + betaNAPij + aj + eij
#aj ~ N(0,var(a))
#Só intercept aleatório;
Mlme1 <- lme(Richness ~ NAP,
random = ~1|fBeach,data=RIKZ)
summary(Mlme1)
#estimar a proporçào variancia explicada pelas prais:
(2.944065^2)/(2.944065^2 + 3.05977^2)
F0<-fitted(Mlme1,level=0) #fitted values para a populacao como um todo.
F1<-fitted(Mlme1,level=1) #fitted values para cada praia
I<-order(RIKZ$NAP)
NAPs<-sort(RIKZ$NAP)
plot(NAPs,F0[I],lwd=4,type="l",ylim=c(0,22),
ylab="Richness",xlab="NAP")
for (i in 1:9){
x1<-RIKZ$NAP[RIKZ$Beach==i]
y1<-F1[RIKZ$Beach==i]
K<-order(x1)
lines(sort(x1),y1[K])
}
#Praia como variável aleatória
#intercept e slope aleatorio.
#Cada praia com um intercept e uma inclinação
#da reta diferentes
#Rij =  alpha + betaNAPij + aj + bjNAPij + eij
#aj ~ N(0,var(a))
#bj ~ N(0,var(b))
Mlme2 <- lme(Richness ~ NAP,
random = ~1 + NAP | fBeach, data = RIKZ)
summary(Mlme2)
F0<-fitted(Mlme2,level=0) #fitted values para a populacao como um todo.
F1<-fitted(Mlme2,level=1) #fitted values para cada praia
I<-order(RIKZ$NAP)
NAPs<-sort(RIKZ$NAP)
plot(NAPs,F0[I],lwd=4,type="l",ylim=c(0,22),
ylab="Richness",xlab="NAP")
for (i in 1:9){
x1<-RIKZ$NAP[RIKZ$Beach==i]
y1<-F1[RIKZ$Beach==i]
K<-order(x1)
lines(sort(x1),y1[K])
}
#testing on the boundary
#quando comparando o modelo aleatorio
#estamos testando se variancia = 0,
#mas a hipotese alternativa var > 0,
#ao inves de var != 0
#dessa forma os valores de AIC e p
#tem que ser olhados com cuidado
Mgls <- gls(Richness ~ NAP, data=RIKZ, method="REML")
insp.plot(Mgls, data=RIKZ[,c("NAP","fBeach")])
Mlme1 <- lme(Richness ~ NAP, random = ~1|fBeach,data=RIKZ, method="REML")
Mlme2 <- lme(Richness ~ NAP, random = ~1 + NAP|fBeach,data=RIKZ, method="REML")
anova(Mgls,Mlme1,Mlme2)
#Segundo Verbeke and molenberghs (2000) em Zuur et al. (2009), p.123
#os valores podem ser corrigdos por 0.5*(chi(df=p-1)+chi(df=p))
#p = numero de parametros extras
0.5*( (1-pchisq(12.720753, df=0)) + (1-pchisq(12.720753, df=1)) )
0.5*( (1-pchisq(7.096378, df=1)) + (1-pchisq(7.096378, df=2)) )
summary(Mlme2)
#EXEMPLO
#Efeito de tratamentos no solo na densidade de bacterias
#nas folhas. Medidas varias folhas por planta
library(nlme)
Ch12<-read.csv("Ch12.csv", dec=".")
setwd("/home/cleber/github/Tutoriais/TutorialR")
Ch12<-read.csv("Ch12.csv", dec=".")
Ch12<-read.csv("ch12.csv", dec=".")
names(Ch12)
micro<-data.frame(density = Ch12$DENSITY,
plant = Ch12$PLANT, treatment = Ch12$TREATMNT)
micro<-micro[1:60,]
micro$treatment<-as.factor(micro$treatment)
micro$plant<-as.factor(micro$plant)
head(micro)
micro<-data.frame(density = Ch12$DENSITY,
plant = Ch12$PLANT, treatment = Ch12$TREATMNT)
View(micro)
micro<-micro[1:60,]
micro$treatment<-as.factor(micro$treatment)
micro$plant<-as.factor(micro$plant)
head(micro)
dev.off()
dotchart(micro$density, groups=micro$treatment)
dotchart(micro$density, groups=micro$plant)
table(micro$plant, micro$treatment)
lm0<-lm(density ~ treatment, data=micro)
#alem de ser conceitualmente incorreto,
#os residuos sugerem dependencia por cada planta
insp.plot(lm0, data=micro)
plot(residuals(lm0) ~ micro$plant)
#Modelos mistos.
Mgls<-gls(density ~ treatment, data=micro)
Mlme<-lme(density ~ treatment,
random = ~1|plant, data=micro)
anova(Mgls,Mlme)
#AIC também sugere melhor ajuste.
AICc(Mgls,Mlme)
#validacao do modelo misto
insp.plot(Mlme, data=micro)
sim<-insp.sim(model=Mlme,
nsim=19,
data=extract.data(Mlme))
dev.off()
plots.insp.sim(insp.sim= sim$sim,
resid= lapply(sim$sim,extract.resid),
fitted= lapply(sim$sim,fitted),
data= sim$sim.data,
pred = c("treatment","plant"),
ask=FALSE)
#teste da estrutura fixa
#Log likelihood ratio test:
Mlme<-lme(density ~ treatment,
random = ~1|plant,
data=micro, method="ML")
Mlme1<-lme(density ~ 1,
random = ~1|plant,
data=micro, method="ML")
anova(Mlme1, Mlme)
#se nao fosse considerada a dependencia:
anova(lm0)
summary(lm0)$coeff
summary(Mlme)
(13.84519^2)/(13.84519^2 + 23.36826^2)
Bees<-read.table("Bees.txt", header = TRUE)
setwd("/home/cleber/github/Tutoriais/TutorialR/aula020")
Bees<-read.table("Bees.txt", header = TRUE)
View(Bees)
Bees$fHive<-factor(Bees$Hive)
Bees$fInfection01<-factor(Bees$Infection)
Bees$LSpobee = log(Bees$Spobee) + 1
dev.off()
boxplot(LSpobee ~ fInfection01, data = Bees, varwidth = TRUE)
Bees$fInfection01
Bees$fInfection01[Bees$fInfection01 > 1] <- 1
# Bees<-read.csv("Bees.csv")
Bees<-read.table("Bees.txt", header = TRUE)
Bees$fHive<-factor(Bees$Hive)
Bees$Infection[Bees$Infection > 1] <- 1
Bees$Infection
# Bees<-read.csv("Bees.csv")
Bees<-read.table("Bees.txt", header = TRUE)
Bees$fHive<-factor(Bees$Hive)
Bees$fInfection01<-Bees$Infection
Bees$fInfection01[Bees$fInfection01 > 1] <- 1
Bees$fInfection01<-factor(Bees$fInfection01)
Bees$LSpobee = log(Bees$Spobee) + 1
dev.off()
boxplot(LSpobee ~ fInfection01, data = Bees, varwidth = TRUE)
M1 <- lm(LSpobee ~ fInfection01 * BeesN, data = Bees)
dev.off()
insp.plot(M1, data=Bees[,c("fInfection01",
"BeesN",
"fHive")])
M1 <- lm(LSpobee ~ fInfection01 * BeesN, data = Bees)
boxplot(Spobee ~ fInfection01, data = Bees, varwidth = TRUE)
boxplot(Spobee ~ fInfection01, data = Bees)
, varwidth = TRUE
boxplot(Spobee ~ fInfection01, data = Bees, varwidth = TRUE)
boxplot(LSpobee ~ fInfection01, data = Bees, varwidth = TRUE)
dotchart(Bees$LSpobee, groups=as.factor(Bees$fInfection01),
xlab = "Infection",
ylab = "Order of the data")
View(Bees)
M1 <- lm(LSpobee ~ fInfection01 * BeesN, data = Bees,
na.action=na.fail)
?lm
M1 <- lm(LSpobee ~ fInfection01 * BeesN, data = Bees,
na.action=na.exclude)
?data.frame
na.omit(Bees)
# Bees<-read.csv("Bees.csv")
Bees<-read.table("Bees.txt", header = TRUE)
Bees$fHive<-factor(Bees$Hive)
Bees$fInfection01<-Bees$Infection
Bees$fInfection01[Bees$fInfection01 > 1] <- 1
Bees$fInfection01<-factor(Bees$fInfection01)
Bees$LSpobee = log(Bees$Spobee) + 1
Bees <- Bees[is.finite(rowSums(Bees)),]
# Bees<-read.csv("Bees.csv")
Bees<-read.table("Bees.txt", header = TRUE)
Bees$LSpobee = log(Bees$Spobee) + 1
Bees <- Bees[is.finite(rowSums(Bees)),]
Bees$fHive<-factor(Bees$Hive)
Bees$fInfection01<-Bees$Infection
Bees$fInfection01[Bees$fInfection01 > 1] <- 1
Bees$fInfection01<-factor(Bees$fInfection01)
boxplot(LSpobee ~ fInfection01, data = Bees, varwidth = TRUE)
dotchart(Bees$LSpobee, groups=as.factor(Bees$fInfection01),
xlab = "Infection",
ylab = "Order of the data")
M1 <- lm(LSpobee ~ fInfection01 * BeesN, data = Bees,
na.action=na.exclude)
dev.off()
insp.plot(M1, data=Bees[,c("fInfection01",
"BeesN",
"fHive")])
plot(residuals(M1) ~ Bees$fHive, ylab = "Ordinary residuals", xlab = "Hives")
abline(0, 0)
#SELECAO DA ESTRUTURA ALEATORIA (REML e AIC)
#SELECAO DA ESTRUTURA ALEATORIA
#SELECAO DA ESTRUTURA ALEATORIA
library(nlme)
library(lattice)
M2<-gls(LSpobee ~ fInfection01 * BeesN, data = Bees)
M3<-lme(LSpobee ~ fInfection01 * BeesN,
random =~ 1 | fHive, data = Bees)
anova(M2,M3)
summary(M3)
insp.plot(M3,
data=Bees[,c("fInfection01","BeesN", "fHive")])
sim<-insp.sim(model=M3,
nsim=19,
data=extract.data(M3))
plots.insp.sim(insp.sim=sim$sim,
resid=lapply(sim$sim,extract.resid),
fitted=lapply(sim$sim,fitted),
data=sim$sim.data,
pred = c("fInfection01","BeesN", "fHive"),
ask=FALSE)
M6<-lme(LSpobee ~ fInfection01 * BeesN,
random =~ 1 | fHive,
weights = varIdent(form =~ 1 | fInfection01), data =  Bees)
anova(M3,M6)
dev.off()
insp.plot(M6,
data=Bees[,c("fInfection01","BeesN", "fHive")])
summary(M6)
M1 <- lm(LSpobee ~ fInfection01 * BeesN, data = Bees)
boxplot(LSpobee ~ fInfection01, data = Bees, varwidth = TRUE)
# Bees<-read.csv("Bees.csv")
Bees<-read.table("Bees.txt", header = TRUE) # o arquivo é txt e não csv
Bees$LSpobee = log(Bees$Spobee) + 1 # log10 do vetor Spobee + 1
Bees <- Bees[is.finite(rowSums(Bees)),] # remove as linhas com valor indefinido (-Inf) de log de zero.
Bees$fHive<-factor(Bees$Hive) # coloca as 24 hives (colmeias) como categórico
Bees$fInfection01<-Bees$Infection # cópia do vetor Infetion original
Bees$fInfection01[Bees$fInfection01 > 1] <- 1 # substitui os valores 2 e 3 de infection como 1, para formar infection 0 e 1 apenas.
Bees$fInfection01<-factor(Bees$fInfection01) # define as duas categorias (0 e 1)
boxplot(LSpobee ~ fInfection01, data = Bees, varwidth = TRUE)
dotchart(Bees$LSpobee, groups=as.factor(Bees$fInfection01),
xlab = "Infection",
ylab = "Order of the data")
M1 <- lm(LSpobee ~ fInfection01 * BeesN, data = Bees)
insp.plot(M1, data=Bees[,c("fInfection01",
"BeesN",
"fHive")])
plot(residuals(M1) ~ Bees$fHive, ylab = "Ordinary residuals", xlab = "Hives")
abline(0, 0)
#Modelos Mistos / Multiníveis / Hierárquicos
#Modelos Mistos / Multiníveis / Hierárquicos
#Falta de Independencia
library(nlme) #ou lme4
#SELECAO DA ESTRUTURA ALEATORIA (REML e AIC)
#SELECAO DA ESTRUTURA ALEATORIA
#SELECAO DA ESTRUTURA ALEATORIA
library(nlme)
library(lattice)
M2<-gls(LSpobee ~ fInfection01 * BeesN, data = Bees)
M3<-lme(LSpobee ~ fInfection01 * BeesN,
random =~ 1 | fHive, data = Bees)
anova(M2,M3)
summary(M3)
library(MuMIn)
AICc(M2, M3)
summary(M3)
insp.plot(M3,
data=Bees[,c("fInfection01","BeesN", "fHive")])
sim<-insp.sim(model=M3,
nsim=19,
data=extract.data(M3))
plots.insp.sim(insp.sim=sim$sim,
resid=lapply(sim$sim,extract.resid),
fitted=lapply(sim$sim,fitted),
data=sim$sim.data,
pred = c("fInfection01","BeesN", "fHive"),
ask=FALSE)
M6<-lme(LSpobee ~ fInfection01 * BeesN,
random =~ 1 | fHive,
weights = varIdent(form =~ 1 | fInfection01), data =  Bees)
anova(M3,M6)
AICc(M3, M6)
insp.plot(M6,
data=Bees[,c("fInfection01","BeesN", "fHive")])
summary(M6)
#SELECAO DA ESTRUTURA FIXA
M7full<-lme(LSpobee ~ 1+fInfection01 + BeesN + fInfection01:BeesN,
random=~1|fHive,
weights=varIdent(form =~ 1 | fInfection01),
method="ML", data = Bees)
drop1(M7full, test = "Chisq")
drop1(update(M7full, .~.-fInfection01:BeesN), test = "Chisq")
drop1(update(M7full, .~.-fInfection01:BeesN-BeesN), test = "Chisq")
M7.final<-update(M7full, .~.-fInfection01:BeesN-BeesN)
#Validacao do Modelo Final
insp.plot(M7.final,
data=Bees[,c("fInfection01","BeesN", "fHive")])
sim<-insp.sim(model=M7.final,
nsim=19,
data=extract.data(M7.final))
plots.insp.sim(insp.sim=sim$sim,
resid=lapply(sim$sim,extract.resid),
fitted=lapply(sim$sim,fitted),
data=sim$sim.data,
pred = c("fInfection01","BeesN", "fHive"),
ask=FALSE)
summary(M7.final)
library(emmeans)
emmeans(M7.final, ~fInfection01)
dredge(M7full)
