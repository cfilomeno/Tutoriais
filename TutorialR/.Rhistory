#11. Selecione os componentes do vetor com base no
#resultado de um teste lógico (==, !=, >, <, >=, <=)
#de outro vetor.
idade <- vet2[vet2 != 18]
idade
#11. Selecione os componentes do vetor com base no
#resultado de um teste lógico (==, !=, >, <, >=, <=)
#de outro vetor.
idade <- vet1[vet1 > 20]
idade
#MATRIZES
#MATRIZES
#MATRIZES
#linhas e colunas; função matrix()
#Criar uma
#matriz com 3 linhas e 3 colunas
?matrix
matrix()
mat <- matrix(nrow = 3, ncol = 3)
mat
matrix()
mat <- matrix(nrow = 3, ncol = 3)
mat
#Atribuir números de 1 a 9 a essa matriz
mat<-matrix(data= c(1,2,3,4,5,6,7,8,9) ,
nrow=3,ncol=3) #nrow =
mat
mat <- matrix(nrow = 3, ncol = 3)
mat
#ou #e possivel fazer assim tambem, de um jeito mais simplificado
1:9
mat[,] <- 1:9 #preenche toda a matriz com numeros de 1 a 9, mais pratico fazer assim
mat
#Dar nomes as colunas e linhas da matriz
#rownames() e colnames(). dica: use c()
rownames(mat) #atribuir nomes aos nomes das linhas da matriz
rownames(mat) <- c("um","dois","tres")
mat
colnames(mat) <- c("um","dois","tres") #nome das colunas ver console
mat
#Calcular a soma das colunas e das linhas
#rowSums() e colSums()
rowSums(mat) #soma os numeros das linhas
colSums(mat) #soma os numeros das colunas
#?rowSums #help sobre as funcoes
rowMeans(mat) #Funcao para calcular as medias das linhas
colMeans(mat) #Funcao para calcular as medias das colunas
#Adicionar uma nova coluna e uma nova linha
#cbind() e rbind(). dica: use cbind(mat,c(algo aqui)) #cbind e funcao de juntar colunas rbind e de juntar linhas
vetor1<-c(1,2)
vetor2<-c(3,4)
c(vetor1,vetor2)
mat
v1<-c(100,100,100)
mat <- cbind(mat , v1)
mat
v2<-c(10,10,10,10)
mat<-rbind(mat,v2)
mat
v3 <- c(12,11,1)
mat<- rbind(mat,v3)
mat
matrix(data, nrow = rows, ncol = cols)
#Atribuir números de 1 a 9 a essa matriz
mat<-matrix(data= c(1,2,3,4,5,6,7,8,9) ,
nrow=3,ncol=3) #nrow =
v1<-c(100,100,100)
mat <- cbind(mat , v1)
v2<-c(10,10,10,10)
mat<-rbind(mat,v2)
matrix(data, nrow = rows, ncol = cols)
#Selecionando elementos de uma matriz.
#Selecione os elementos na linha 2 e coluna 3
mat[2,3]
mat
#Selecionar os elementos das linhas 2 e 3. e
#colunas 1 e 2
mat[c(2,3), c(1,2)]
#6.6.Excluir uma coluna #na verdade nao exclui, apenas extrai as colunas ou linhas de interesse
mat[1:4,-4] #ou
mat[ ,c(1,2,3)] #ou
mat[ ,1:3] #ou
#6.7.Adicionar uma coluna no meio usando o cbind
v3<-c(10,10,10,10)
cbind(mat[,1], v3, mat[,2:3])
#Aritmética com matrizes
#Somar um número
mat1<-matrix(data = c(1,2,3,4,5,6,7,8,9),
nrow=3, ncol=3)
mat1
#Soma 10 a todos os elementos da matrix
mat1+10
#multiplica por 2 todos os elemetos da matrix
2*mat1
#Multiplicar elementos de duas matrizes aritmeticamente ##OBS:sempre TEM que ter o mesmo tamanho
mat1<-matrix(data=c(1,2,3,4,5,6,7,8,9),
nrow=3, ncol=3)
mat2<-matrix(data=c(1,2,3,4,5,6,7,8,9),
nrow=3, ncol=3)
mat1*mat2
#Note que isso é diferente de multiplicação de matrizes em
#algebra linear (matrix multiplication): ##segundo o prof esta e diferente da funcao acima, esta e multiplicacao de matriz por matriz
mat1 %*% mat2 #este e um processo diferente do anterios, utilizaremos este no futuro para modelos lineares
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
#1. Crie uma matriz com 10 colunas e 3 linhas
ma = matrix(nrow = 3, ncol = 1)
ma
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
#1. Crie uma matriz com 10 colunas e 3 linhas
ma = matrix(nrow = 3, ncol = 10)
ma
#2. Use a função t() para transpor a matriz
t(ma)
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
#1. Crie uma matriz com 10 colunas e 3 linhas
mat = matrix(nrow = 3, ncol = 10)
mat
#2. Use a função t() para transpor a matriz
t(mat)
#4. Extraia da matriz um vetor com a segunda coluna
vet = mat[,2]
vet
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
#1. Crie uma matriz com 10 colunas e 3 linhas
mat = matrix(data=c(1:30), nrow = 3, ncol = 10)
mat
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
#1. Crie uma matriz com 10 colunas e 3 linhas
mat = matrix(data=1:30, nrow = 3, ncol = 10)
mat
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
#1. Crie uma matriz com 10 colunas e 3 linhas
mat = matrix(data=1:, nrow = 3, ncol = 10)
mat
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
###EXERCICIOS####
#1. Crie uma matriz com 10 colunas e 3 linhas
mat = matrix(nrow = 3, ncol = 10)
mat[,] = 2:
#2. Use a função t() para transpor a matriz
t(mat)
mat[,] = 2:60
mat[,] = 2:31
mat
#2. Use a função t() para transpor a matriz
t(mat)
#4. Extraia da matriz um vetor com a segunda coluna
vet = mat[,2]
vet
#5. Multiplique apenas a segunda coluna por 3
3*mat[,2]
#6. Extria apenas o triangulo inferior da matriz. Dica: veja ?lower.tri
mat
#6. Extria apenas o triangulo inferior da matriz. Dica: veja ?lower.tri
lower.tri(mat)
#6. Extria apenas o triangulo inferior da matriz. Dica: veja ?lower.tri
?lower.tri
#7. Crie uma matrix de 2 linhas e 3 com apenas nomes
m <- matrix[2,3]
#7. Crie uma matrix de 2 linhas e 3 com apenas nomes
m <- matrix[c(2,3)]
#7. Crie uma matrix de 2 linhas e 3 com apenas nomes
m <- matrix(2,3)
m
#7. Crie uma matrix de 2 linhas e 3 com apenas nomes
m <- matrix(,2,3)
m
#7. Crie uma matrix de 2 linhas e 3 com apenas nomes
mat2 <- matrix(nrow=2,ncol=3)
m
mat2 <- c("vermelho", "azul", "amarelo", "preto", "rosa", "verde")
mat2
mat2[,] <- c("vermelho", "azul", "amarelo", "preto", "rosa", "verde")
#7. Crie uma matrix de 2 linhas e 3 com apenas nomes
mat2 <- matrix(nrow=2,ncol=3)
rownames(mat2) <- c("vermelho", "azul", "amarelo")
rownames(mat2) <- c("vermelho", "azul")
colnames(mat2) <- c("preto", "rosa", "verde")
mat2
#8. Substitua o componente da linha 1 coluna 1 por "Zoologia"
mat2[1,1] <- "Zoologia"
mat2
#FATORES
#FATORES
#FATORES
#Fatores são variáveis categóricas de dados estatísticos.Podemos ter texto, numeros, logicos
#por exemplo MACHOS e FÊMEAS:
1223
12.4
TRUE ##logico
FALSE ##logico
NA ##nao temos a informacao
NULL ##ausencia de informacao, nao existe informacao dentro do vetor
is.character("zoologia") ##perguntando se zoologia e um fator
?is.character
sexo<- c("macho", "femea", "femea", "femea", "macho")
is.character(sexo)
#Agora transformar esse vetor em fator
#?factor ##ajuda
sexo <- factor(sexo) ##substituindo o vetor por fator
sexo #veja no console que há dois niveis nivel femea e macho
#Veja ?factor
tamanho <- c("grande", "grande", "pequeno", "pequeno", "medio") ##nao usar sinais e acentos
?factor ##ajuda mostrando o x ##colocar os niveis em ordem crescente P,M,G e colocar 'ordered = True'
# ?factor ##ajuda mostrando o x ##colocar os niveis em ordem crescente P,M,G e colocar 'ordered = True'
tamanho<-factor(x = tamanho,
levels = c("pequeno","medio","grande"),
ordered = TRUE)
tamanho
novo_veto<-tamanho[tamanho > "pequeno"]
novo_veto
factor_temp <- factor(x=temp,
ordered = TRUE, #isso e para ordenar
levels = c("Low", "Medium", "High"))
#2. Fatores podem ser ordenados:
temp <- c("High", "Low", "High","Low", "Medium")
factor_temp <- factor(x=temp,
ordered = TRUE, #isso e para ordenar
levels = c("Low", "Medium", "High"))
#Selecione os valores de factor_temp que são maiores
#do que Low. Dica: use a mesma sintaxe que você usou
#nos vetores.
new <- temp[temp > "low"]
new
#Veja ?factor
tamanho <- c("grande", "grande", "pequeno", "pequeno", "medio") ##nao usar sinais e acentos
# ?factor ##ajuda mostrando o x ##colocar os niveis em ordem crescente P,M,G e colocar 'ordered = True'
tamanho<-factor(x = tamanho,
levels = c("pequeno","medio","grande"),
ordered = TRUE)
tamanho
novo_veto<-tamanho[tamanho > "pequeno"]
novo_veto
#2. Fatores podem ser ordenados:
temp <- c("High", "Low", "High","Low", "Medium")
factor_temp <- factor(x=temp,
ordered = TRUE, #isso e para ordenar
levels = c("Low", "Medium", "High"))
factor_temp
#Selecione os valores de factor_temp que são maiores
#do que Low. Dica: use a mesma sintaxe que você usou
#nos vetores.
new <- factor_temp[factor_temp > "Low"]
new
#Vamos ver os dados da aula passada:
#Carregar os dados iris, que já
#vem com o R
data("iris")
#Estimar o modelo linear:
modelo_sepal <- lm(Sepal.Width ~ Species, data = iris)
#Veja agora
summary(modelo_sepal)
#Você sempre começa com o modelo mais complexo (mais graus de liberdade)
#e o compara com o segundo modelo menos complexo.
#Você elimina as variáveis uma a uma de acordo com o valor de p
modelo_sepal_1 <- lm(Sepal.Width ~ Species, data = iris)
modelo_sepal_2 <- lm(Sepal.Width ~ 1, data = iris)
summary(modelo_sepal_1)
summary(modelo_sepal_1)
summary(modelo_sepal_2)
anova(modelo_sepal_1, modelo_sepal_2, test="F")
?anova
#O que são os resíduos? R: variância não explicada pelo modelo
plot(iris$Sepal.Width)
#segments é a média geral
segments(x0=1,
x1=1150,
y0=mean(iris$Sepal.Width[1:150]),
y1=mean(iris$Sepal.Width[1:150]))
for (i in 1:150) {
segments(x0=i, x1=i, y0=mean(iris$Sepal.Width[1:150]),
y1=iris$Sepal.Width[[i]], lty=3)
}
plot(iris$Sepal.Width)
segments(x0=1,
x1=50,
y0=mean(iris$Sepal.Width[1:50]),
y1=mean(iris$Sepal.Width[1:50]),
col="red")
segments(x0=51,
x1=100,
y0=mean(iris$Sepal.Width[51:100]),
y1=mean(iris$Sepal.Width[51:100]),
col="red")
segments(x0=101,
x1=150,
y0=mean(iris$Sepal.Width[101:150]),
y1=mean(iris$Sepal.Width[101:150]),
col="red")
for (i in 1:50){
segments(x0=i, x1=i,
y0=iris$Sepal.Width[i],
y1=mean(iris$Sepal.Width[1:50]),
lty=3)
}
for (i in 51:100){
segments(x0=i, x1=i,
y0=iris$Sepal.Width[i],
y1=mean(iris$Sepal.Width[51:100]),
lty=3)
}
for (i in 101:150){
segments(x0=i, x1=i,
y0=iris$Sepal.Width[i],
y1=mean(iris$Sepal.Width[101:150]),
lty=3)
}
anova(modelo_sepal_1, modelo_sepal_2, test="F")
#Podemos calcular a diferença de RSS entre os modelos:
16.962 - 28.307
#Agora vamos ponderar essas somas dos quadrados
#pelos graus de liberdade
#Há uma diferenca de 2 graus de liberdade
#entre os RSS dos modelos (149-147).
#Então a média dos quadrados entre os modelos é:
11.345/2
#E a média dos quadrados dos resíduos do primeiro modelo é:
16.962/147
#A razão entre esses valores segue uma distribuição F:
(11.345/2) / (16.962/147)
#(OBS:Isso é exatamente o processo para calcular
#uma tabela de uma ANOVA.
anova(modelo_sepal_1)
#Com o Likelihood ratio test
anova(modelo_sepal_1, modelo_sepal_2, test="LRT")
logLik(modelo_sepal_1, REML = FALSE)
logLik(modelo_sepal_2, REML = FALSE)
library(lmtest)
lrtest(modelo_sepal_2, modelo_sepal_1)
-2 * (-87.77614 - -49.3663)
#Instalar o pacote MuMIn
library(MuMIn)
modelo_sepal_1 <- lm(Sepal.Width ~ Species, data = iris)
modelo_sepal_2 <- lm(Sepal.Width ~ 1, data = iris)
AICc(modelo_sepal_1)
AICc(modelo_sepal_2)
#O que importa é o deltaAIC, não os valores absolutos.
AICc(modelo_sepal_2) - AICc(modelo_sepal_1)
modelo_sepal_1 <- lm(Sepal.Width ~ Species, data = iris,
na.action=na.fail)
?dredge
dredge(modelo_sepal_1, rank = "AICc")
#Exercícios:
#1.Faça a seleção de modelos dos dados de PlantGrowth
#em uma perspectiva frequentista e de teoria da informação:
data("PlantGrowth")
?PlantGrowth
#Estimar o modelo linear:
#modelo_PGLM <- lm(weight ~ group, data = PlantGrowth)
#
#modelo_PGLM
plot(weight ~ group, data = PlantGrowth)
#
#summary(modelo_PGLM)
#
#PERSPECTIVA FREQUENTISTA
modelo_pg_1 <- lm(weight ~ group, data = PlantGrowth)
modelo_pg_1
#
modelo_pg_2 <- lm(weight ~ 1, data = PlantGrowth)
modelo_pg_2
#
summary(modelo_pg_1)
summary(modelo_pg_2)
#
anova(modelo_pg_1 , modelo_pg_2, test="F")
#
#OU
anova(modelo_pg_1, modelo_pg_2, test="LRT")
logLik(modelo_pg_1, REML = FALSE)
logLik(modelo_pg_2, REML = FALSE)
#
library(lmtest)
lrtest(modelo_pg_2, modelo_pg_1)
#
#
#PERSPECTIVA DA TEORIA DA INFORMACAO
#
#
modelo_pg_1 <- lm(weight ~ group, data = PlantGrowth)
modelo_pg_2 <- lm(weight ~ 1, data = PlantGrowth)
#
library(MuMIn)
AICc(modelo_pg_1)
AICc(modelo_pg_2)
#
#
AICc(modelo_pg_2) - AICc(modelo_pg_1)
#
modelo_pg_1 <- lm(weight ~ group, data = PlantGrowth,
na.action=na.fail)
#
dredge(modelo_pg_1, rank = "AICc")
#
plot(modelo_pg_1)
#
#plot(modelo_pg_1)
#plot(modelo_pg_2)
coplot (modelo_pg_1 ~ modelo_pg_2)
#Agora um modelo com a interação entre variáveis
data("iris")
#Agora um modelo com a interação entre variáveis
data("iris")
##Lembrar de sempre comecar do modelo + colexo para o menos complexo
modelo_sepal_int_1 <- lm(Sepal.Width ~ Sepal.Length + Species +
Sepal.Length * Species,
data = iris, na.action = na.fail)
summary(modelo_sepal_int_1)
#Todos os modelos aninhados: + complexo para menos complexo
modelo_sepal_int_2 <- lm(Sepal.Width ~ Sepal.Length + Species,
data = iris, na.action = na.fail)
modelo_sepal_int_3 <- lm(Sepal.Width ~ Sepal.Length,
data = iris, na.action = na.fail)
modelo_sepal_int_4 <- lm(Sepal.Width ~ Species,
data = iris, na.action = na.fail)
modelo_sepal_int_5 <- lm(Sepal.Width ~ 1,
data = iris, na.action = na.fail)
#Em uma perspectiva frequentista:
anova(modelo_sepal_int_1, modelo_sepal_int_2, test="F")
#Teoria da Informação
library(MuMIn)
modelo_sepal_int_1 <- lm(Sepal.Width ~ Sepal.Length + Species +
Sepal.Length * Species,
data = iris,
na.action = na.fail)
dredge(modelo_sepal_int_1) #a funcao organizad o modelo pelo AIC (do maior para o menor)
summary(modelo_sepal_int_1)
setwd("/home/cleber/Documentos/gitHub/Tutoriais/TutorialR/aula014")
RIKZ<-read.csv(file="RIKZ.csv")
setwd("/home/cleber/Documentos/gitHub/Tutoriais/TutorialR
)
setwd("/home/cleber/Documentos/gitHub/Tutoriais/TutorialR")
RIKZ<-read.csv(file="RIKZ.csv")
head(RIKZ)
pairs(RIKZ)
pairs(RIKZ)
RIKZ$week <- factor(RIKZ$week) #transformou a variavel semana em fator
RIKZ_model.1<-lm(log.Richness ~ NAP + grainsize + humus + week,
data = RIKZ)
#Frequentista:
#NAP 48.547 2.721e-08 ***
RIKZ_model.2<-lm(log.Richness ~ grainsize + humus + week,
data = RIKZ)
anova(RIKZ_model.1,RIKZ_model.2, test="F") #comparando modelos 2 e 1
RIKZ_model.3<-lm(log.Richness ~ NAP + humus + week,
data = RIKZ)
anova(RIKZ_model.1,RIKZ_model.3, test="F")
RIKZ_model.4<-lm(log.Richness ~ NAP + grainsize + week,
data = RIKZ)
anova(RIKZ_model.1,RIKZ_model.4, test="F") #comparando modelos 1 e 4
#week 6.8396 0.0008489 ***
RIKZ_model.5<-lm(log.Richness ~ NAP + grainsize + humus,
data = RIKZ)
anova(RIKZ_model.1,RIKZ_model.5, test="F") #comparando modelos 1 e 5
RIKZ_model.7<-lm(log.Richness ~ NAP + humus,
data = RIKZ)
anova(RIKZ_model.3,RIKZ_model.7, test="F")
#não tem humus #1.1427 0.2917
RIKZ_model.8<-lm(log.Richness ~ NAP + week,
data = RIKZ)
anova(RIKZ_model.3,RIKZ_model.8, test="F")
#Week
RIKZ_model.8<-lm(log.Richness ~ NAP + week, data = RIKZ)
RIKZ_model.9<-lm(log.Richness ~ NAP, data = RIKZ)
anova(RIKZ_model.8,RIKZ_model.9, test="F")
#NAP
RIKZ_model.10<-lm(log.Richness ~ week, data = RIKZ)
anova(RIKZ_model.8,RIKZ_model.10, test="F")
#O modelo final é
RIKZ_model.8<-lm(log.Richness ~ NAP + week, data = RIKZ)
summary(RIKZ_model.8)
#Pode fazer isso de maneira menos tediosa usando o
#drop1
drop1(RIKZ_model.1, test = "F")
#Teoria da Informacao
RIKZ_model.1<-lm(log.Richness ~ NAP + grainsize + humus + week,
data = RIKZ, na.action=na.fail)
library(MuMIn)
dredge(RIKZ_model.1)
#TOT.N.log = log do Total de atropelamentos.
#Use TOT.N.log como sua variável resposta. Não teste interações
#entre as variáveis preditoras (apenas +, não *).
#1. Faça a seleção de modelos pelo método frequentista ou
#da teoria da informação.
RK<-read.csv("RK.csv")
head(RK)
#Escolhi o metodo da Teoria da Informacao
RK_model_LF<-lm(TOT.N.log ~ OPEN.L + MONT.S + SQ.POLIC + D.PARK + SQ.SHRUB + SQ.WATRES + L.WAT.C + SQ.LPROAD + SQ.DWATCOUR,
data = RK, na.action=na.fail)
#
library(MuMIn)
dredge(RK_model_LF)
