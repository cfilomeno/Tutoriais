#DATA FRAME
#DATA FRAME
#DATA FRAME
#DATA FRAME
#Vetores e matrizes só aceitam elementos de um mesmo tipo. Em um
#data frame cada coluna pode conter um conjunto de dados
#diferente. Na prática funciona como se fosse
#uma tabela do Excel.
#Existe no R alguns data.frame de exemplo. Veja iris:
iris
#ou
View(iris)
#As colunas e linhas podem ser acessadas do mesmo jeito que a matriz
#Selecionar a segunda coluna
iris [ ,2]
novo_vetor<-iris[ ,2]
novo_vetor
#Selecionar a segunda linha
iris[2, ]
#Selecionar mais de uma linha
iris[c(2,4), ]
#Mas podem ser acessadas pelo nome das colunas também, usando o $
colnames(iris) #ver o nome das colunas com funcao colnames
iris$Species #o $ extrai os dados, aqui pedimos os dados de especies
iris$Petal.Length #extrai os dados de tamanhos de petalas
#Data frames são criados com a função data.frame():
#Nesse exemplo primeiro são criados uma série de vetores:
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
name
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
##Esses vetores são unidos em um data.frame chamado planetas
?data.frame
planetas <- data.frame(name, type, diameter, rotation, rings)
planetas
View(planetas)
#Manipulando um data.frame
planetas[planetas$rings==FALSE, ]
planetas[planetas$rings==FALSE]
planetas[planetas$diamete>=5, ]
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
##Esses vetores são unidos em um data.frame chamado planetas
?data.frame
planetas <- data.frame(name, type, diameter, rotation, rings)
############
#EXERCÍCIOS#
#EXERCÍCIOS#
#EXERCÍCIOS#
############
#1. Usando o data.frame planetas, selecione a primeira linha
#das colunas 2 e 5
planetas[c(,2:5)]
############
#EXERCÍCIOS#
#EXERCÍCIOS#
#EXERCÍCIOS#
############
#1. Usando o data.frame planetas, selecione a primeira linha
#das colunas 2 e 5
planetas[c( ,2:5)]
############
#EXERCÍCIOS#
#EXERCÍCIOS#
#EXERCÍCIOS#
############
#1. Usando o data.frame planetas, selecione a primeira linha
#das colunas 2 e 5
planetas[, c(2:5)]
planetas
############
#EXERCÍCIOS#
#EXERCÍCIOS#
#EXERCÍCIOS#
############
#1. Usando o data.frame planetas, selecione a primeira linha
#das colunas 2 e 5
planetas[, c(2,3,4,5)]
############
#EXERCÍCIOS#
#EXERCÍCIOS#
#EXERCÍCIOS#
############
#1. Usando o data.frame planetas, selecione a primeira linha
#das colunas 2 e 5
planetas[ , c(2,3,4,5)]
#2. Selecione apenas os planetas que tem diâmetro menor do que 0.6
planetas[planetas$diameter<0.6, ]
############
#EXERCÍCIOS#
#EXERCÍCIOS#
#EXERCÍCIOS#
############
#1. Usando o data.frame planetas, selecione a primeira linha
#das colunas 2 e 5
planetas[1, c(2,5)]
#3. A função order() retorna um novo vetor com a posição
#ordeneda. Por exemplo
v1<-c(10,50,20,70,90,40,20)
ordem.v1<-order(v1)
ordem.v1 #indica a ordem ascendente do vetor v1.
#se eu quiser reordená-lo:
v1<-v1[ordem.v1]
v1 #agora v1 está em ordem crescente
#Agora ordene o data.frame
#planetas com base no diâmetro
ordem.planetas <- order(planetas$diameter)
ordem.planetas
ordem.diametro <- planetas[ordem.planetas]
ordem.planetas
planetas
planetas <- planetas[ordem.planetas]
planetas <- planetas[order(planetas$diameter)]
#4. Crie um data.frame com três colunas. A primeira coluna com números,
#a segunda, com um fator e a terceira com TRUE/FALSE.
col1 <- c(11, 22, 33)
col2 <- factor(c("azul", "vermelho", "vermelho", "vermelho", "azul"))
?type
type(planetas$rings)
typeof(planetas$rings)
col3 <- c(TRUE, FALSE, FALSE, TRUE, FALSE, FALSE)
df <- data.frame(col1, col2, col3)
col3 <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
df <- data.frame(col1, col2, col3)
col2
col2 <- factor(c("azul", "vermelho", "vermelho", "vermelho", "amarelo"))
col2
col3 <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
df <- data.frame(col1, col2, col3)
col2 <- c("azul", "vermelho", "vermelho", "vermelho", "amarelo")
col3 <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
df <- data.frame(col1, col2, col3)
#4. Crie um data.frame com três colunas. A primeira coluna com números,
#a segunda, com um fator e a terceira com TRUE/FALSE.
col1 <- c(11, 22, 33, 44, 55)
col2 <- c("azul", "vermelho", "vermelho", "vermelho", "amarelo")
col3 <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
df <- data.frame(col1, col2, col3)
df
col2 <- c("azul", "vermelho", "vermelho", "vermelho", "azul")
df <- data.frame(col1, col2, col3)
df
col2 <- factor(c("azul", "vermelho", "vermelho", "vermelho", "azul"))
col3 <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
df <- data.frame(col1, col2, col3)
df
col2
?order
planetas <- planetas[order(planetas$diameter)]
planetas$diameter <- planetas[order(planetas$diameter)]
#Agora ordene o data.frame
#planetas com base no diâmetro
ordem.diameter <- order(planetas$diameter)
ordem.diameter
planetas <- planetas$diameter[ordem.diameter]
planetas
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
##Esses vetores são unidos em um data.frame chamado planetas
?data.frame
planetas <- data.frame(name, type, diameter, rotation, rings)
planetas
#Agora ordene o data.frame
#planetas com base no diâmetro
ordem.diameter <- order(planetas$diameter)
ordem.diameter
planetas1 <- planetas[ordem.diameter]
planetas1 <- planetas
planetas1 <- rbind(planetas[ordem.diameter])
#Agora ordene o data.frame
#planetas com base no diâmetro
o <- order(planetas$diameter)
planetas1 <- planetas
planetas1 <- rbind(name[o], type[o], diameter[o], rotation[o], rings[o])
planetas1
planetas1 <- data.frame(name[o], type[o], diameter[o], rotation[o], rings[o])
planetas1
planetas_by_diameter <- data.frame(name[o], type[o], diameter[o], rotation[o], rings[o])
planetas_by_diameter
#Vetor com números de 1 a 10
meu_vetor <- seq(from=1,to=10,by=1)
# Matrix 3x3 com números de  1 up to 9
minha_matriz <- matrix(1:9, ncol = 3, nrow = 3)
#Vetor com números de 1 a 10
meu_vetor <- seq(from=1,to=10,by=1)
# Matrix 3x3 com números de  1 up to 9
minha_matriz <- matrix(1:9, ncol = 3, nrow = 3)
?mtcars
# Primeiras 10 linhas do conjunto de dados mtcars
meu_df <- mtcars[1:10,]
meu_df
minha_lista <- list(meu_vetor = meu_vetor, #cria uma lista com objetos que já existem, pode colocar matriz, dataframe...
minha_matriz = minha_matriz,
meu_df = meu_df)
minha_lista
#Essa lista tem 3 dimensões
minha_lista[[1]] #tem o vetor my_vector
minha_lista$minha_matrix #ele pode ser chamado usando $ também
minha_lista$minha_matriz #ele pode ser chamado usando $ também
minha_lista[[3]] #tem o data frame
minha_lista[c(1,3)] #primeira e terceira dimensoes
minha_lista$meu_df[ ,1] #Ok. Apareceu [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2
#2. Cria uma lista, com a primeira dimensão sendo um vetor de TRUE/FALSE,
#a segunda dimensão o data.frame iris, e na terceira um vetor com o
#seu nome.
d1 <- c(T, F, T, F, F)
d2 <- iris
d3 <- "cleber"
nova_lista <- list(d1,
d2,
d3)
nova_lista
?names
#3. Modifique o nome da primeira dimensão da sua lista.
#dica use a função names()
names(nova_lista[1]) <- dim1
#3. Modifique o nome da primeira dimensão da sua lista.
#dica use a função names()
names(nova_lista[1]) <- "dim1"
nova_lista[1]
nova_lista[[1]]
#3. Modifique o nome da primeira dimensão da sua lista.
#dica use a função names()
names(nova_lista[[1]) <- "dim1"
#3. Modifique o nome da primeira dimensão da sua lista.
#dica use a função names()
names(nova_lista[[1]]) <- "dim1"
nova_lista[[1]]
nova_lista[1]
?list
#2. Cria uma lista, com a primeira dimensão sendo um vetor de TRUE/FALSE,
#a segunda dimensão o data.frame iris, e na terceira um vetor com o
#seu nome.
d1 <- c(T, F, T, F, F)
d2 <- iris
d3 <- "cleber"
nova_lista <- list(d1,
d2,
d3)
nova_lista[[1]]
nova_lista[1]
#3. Modifique o nome da primeira dimensão da sua lista.
#dica use a função names()
names(nova_lista[1]) <- "dim1"
nova_lista[1]
d1 <- c(T, F, T, F, F)
d2 <- iris
d3 <- "cleber"
nova_lista <- list(d1,
d2,
d3)
#3. Modifique o nome da primeira dimensão da sua lista.
#dica use a função names()
names(nova_lista[[1]]) <- "dim1"
nova_lista[1]
d1 <- c(T, F, T, F, F)
d2 <- iris
d3 <- "cleber"
nova_lista <- list(d1,
d1 <- c(T, F, T, F, F)
d2 <- iris
d3 <- "cleber"
nova_lista <- list(d1,
d2,
d3)
d1 <- c(T, F, T, F, F)
d2 <- iris
d3 <- "cleber"
nova_lista <- list(d1,
d2,
d3)
names(nova_lista[c(1)]) <- "dim1"
nova_lista
nova_lista[1]
nova_lista[[1]]
dim1
names(nova_lista[c(1)]) <- dim1
dim1 <- names(nova_lista[c(1)])
dim1
?names
names(nova_lista)
d1 <- c(T, F, T, F, F)
d2 <- iris
d3 <- "cleber"
nova_lista <- list(d1,
d2,
d3)
names(nova_lista)
names(nova_lista)[1] <- "dim1"
nova_lista
setwd("~/github/Tutoriais/TutorialR/aula6")
#linux:  setwd("~/")
getwd()
#a função dir() lista todos os arquivos no diretório
dir()
#Vamos criar uma tabela com os dados:
dados <- data.frame(ID = 1:10,
dados1 = rnorm(n=10),
dados2 = rnorm(n=10))
head(dados)
?rnorm
#agora vamos salvar o arquivo
write.table(x=dados, file="meusdados.txt")
#veja aqui se ''meusdados.txt' foi salvo no diretório
dir()
#é possível também salvar em formato .csv
write.csv(x=dados, file="meusdados.csv",
row.names = FALSE)
dir()
View(meusdados.txt)
View(meusdados.csv)
View(dados)
#carregar os arquivos e atribuir a um objeto 'meusdados'
meusdados <- read.table(file="meusdados.txt",
header=TRUE)
#a mesma coisa para um csv. Note que em portugues
#o separador de colunas é geralmente ';' e o separador de
#decimal ','. No entanto o default do R muitas vezes é
#usar ',' como separador de coluna e '.' como separador de
#decimal. Isso pode ser ajustado usando os argumentos
#'sep' e dec=''
meusdados.csv<-read.csv(file="meusdados.csv",
sep=",", dec=".")
View(meusdados)
View(meusdados.csv)
df <- iris
df
#2. Selecione parte desse data.frame e salve com outro nome.
especies <- df$Species
write.csv(x = especies,
file = "especiesiris.csv",
row.names = F)
dir()
read.csv(file = "especiesiris.csv")
write.csv(x = especies,
file = "especiesiris.csv",
row.names = T)
read.csv(file = "especiesiris.csv")
df <- iris
df
#2. Selecione parte desse data.frame e salve com outro nome.
especies <- df$Species
write.csv(x = especies,
file = "especiesiris.csv",
row.names = F)
#3. Carregue esse data.frame que foi salvo na questão 2.
df_especies = read.csv(file = "especiesiris.csv", sep = ",")
df_especies
?write.csv
read.csv(file = meusdados.csv)
View(meusdados.csv)
View(df)
df <- iris
df
#2. Selecione parte desse data.frame e salve com outro nome.
especies <- df$Species
View(especies)
especies
write.csv(x = especies,
file = "especiesiris.csv",
row.names = T)
#3. Carregue esse data.frame que foi salvo na questão 2.
df_especies = read.csv(file = "especiesiris.csv", sep = ",")
df_especies
df$Species
#2. Selecione parte desse data.frame e salve com outro nome.
especies <- data.frame(df$Species)
View(especies)
write.csv(x = especies,
file = "especiesiris.csv",
row.names = F)
#3. Carregue esse data.frame que foi salvo na questão 2.
df_especies = read.csv(file = "especiesiris.csv", sep = ",")
df_especies
#2. Selecione parte desse data.frame e salve com outro nome.
especies <- data.frame(df$Species)
write.csv(x = especies,
file = "especiesiris.csv",
row.names = T)
#3. Carregue esse data.frame que foi salvo na questão 2.
df_especies = read.csv(file = "especiesiris.csv", sep = ",")
df_especies
df <- iris
df
#2. Selecione parte desse data.frame e salve com outro nome.
especies <- data.frame(df$Species)
write.csv(x = especies,
file = "especiesiris.csv",
row.names = F)
#3. Carregue esse data.frame que foi salvo na questão 2.
df_especies = read.csv(file = "especiesiris.csv", sep = ",")
df_especies
